/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.senla.api;

import org.senla.model.Error;
import org.senla.model.Shop;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.senla.model.dto.ShopDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-05T16:09:04.794912+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "shop", description = "Запросы для shop")
public interface ShopApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /shop : Добваить торговую точку
     * Добваить торговую точку
     *
     * @param shop  (required)
     * @return Торговая точка успешно добавлена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "addShop",
        summary = "Добваить торговую точку",
        description = "Добваить торговую точку",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Торговая точка успешно добавлена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PostMapping("/shop")
    void addShop(
        @Parameter(name = "Shop", description = "", required = true) @Valid @RequestBody ShopDTO shop
    );

    /**
     * GET /shop : Получить все торговые точки
     * Получить все торговые точки
     *
     * @return Все торговые точки (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "allShop",
        summary = "Получить все торговые точки",
        description = "Получить все торговые точки",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все торговые точки", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Shop.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/shop")
    List<ShopDTO> allShop();

    /**
     * GET /shop/{address} : Получить торговую точку по адресу
     * Получить торговую точку по адресу
     *
     * @param address Адрес (required)
     * @return Торговая точка (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getShopByAddress",
        summary = "Получить торговую точку по адресу",
        description = "Получить торговую точку по адресу",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Торговая точка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Shop.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/shop/address/{address}")
    List<ShopDTO> getShopByAddress(
        @Parameter(name = "address", description = "Адрес", required = true, in = ParameterIn.PATH) @PathVariable("address") String address
    );

    /**
     * GET /shop/{id} : Получить торговую точку по ID
     * Получить торговую точку по ID
     *
     * @param id ID торговой точки (required)
     * @return Торговая точка (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getShopById",
        summary = "Получить торговую точку по ID",
        description = "Получить торговую точку по ID",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Торговая точка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Shop.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/shop/{id}")
    Optional<ShopDTO> getShopById(
        @Parameter(name = "id", description = "ID торговой точки", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * GET /shop/{name} : Получить торговую точку по названию
     * Получить торговую точку по названию
     *
     * @param name Название (required)
     * @return Торговая точка (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getShopByName",
        summary = "Получить торговую точку по названию",
        description = "Получить торговую точку по названию",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Торговая точка", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Shop.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/shop/{name}")
    List<ShopDTO> getShopByName(
        @Parameter(name = "name", description = "Название", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );

    /**
     * DELETE /shop/{id} : Удалить торговую точку по ID
     * Удалить торговую точку по ID
     *
     * @param id ID торговой точки (required)
     * @return Торговая точка удалена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "removeShopById",
        summary = "Удалить торговую точку по ID",
        description = "Удалить торговую точку по ID",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Торговая точка удалена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @DeleteMapping("/shop/{id}")
    void removeShopById(
        @Parameter(name = "id", description = "ID торговой точки", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * PATCH /shop : Изменить торговую точку
     * Изменить торговую точку
     *
     * @param id  (required)
     * @return Торговая точка успешно изменена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "updateShop",
        summary = "Изменить торговую точку",
        description = "Изменить торговую точку",
        tags = { "shop" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Торговая точка успешно изменена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PatchMapping("/shop/{id}")
    void updateShop(
            @Parameter(name = "id", description = "ID торговой точки", required = true, in = ParameterIn.PATH) @Valid @RequestBody ShopDTO shop, @PathVariable("id") Long id
    );
}