/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.senla.api;

import org.senla.model.Error;
import org.senla.model.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.senla.model.dto.ProductDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-05T16:09:04.794912+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "product", description = "Запросы для product")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /product : Добваить продукт
     * Добваить новый продукт
     *
     * @param product  (required)
     * @return Продукт добавлен (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Добваить продукт",
        description = "Добваить новый продукт",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Продукт добавлен"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PostMapping("/product")
    void addProduct(
        @Parameter(name = "Product", description = "", required = true) @Valid @RequestBody ProductDTO product
    );

    /**
     * GET /product : Получить все товары
     * Получить все товары
     *
     * @return Все товары (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "allProducts",
        summary = "Получить все товары",
        description = "Получить все товары",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все товары", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/product")
    List<ProductDTO> allProducts();

    /**
     * GET /product/{id} : Получить товар по ID
     * Получить товар по ID
     *
     * @param id ID товара (required)
     * @return Товар (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Получить товар по ID",
        description = "Получить товар по ID",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Товар", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/product/{id}")
    ProductDTO getProductById(
        @Parameter(name = "id", description = "ID товара", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * GET /product/{name} : Получить товар по названию
     * Получить товар по названию
     *
     * @param name Название товара (required)
     * @return Товар (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getProductByName",
        summary = "Получить товар по названию",
        description = "Получить товар по названию",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Товар", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/product/name/{name}")
    List<ProductDTO> getProductByName(
        @Parameter(name = "name", description = "Название товара", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );

    /**
     * DELETE /product/{id} : Удалить товар по ID
     * Удалить товар по ID
     *
     * @param id ID товара (required)
     * @return Товар удален (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "removeProductById",
        summary = "Удалить товар по ID",
        description = "Удалить товар по ID",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Товар удален"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @DeleteMapping("/product/{id}")
    void removeProductById(
        @Parameter(name = "id", description = "ID товара", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * PATCH /product : Изменить продукт
     * Изменить продукт
     *
     * @param product  (required)
     * @return Продукт успешно изменен (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Изменить продукт",
        description = "Изменить продукт",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Продукт успешно изменен"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PatchMapping("/product/{id}")
    void updateProduct(
            @Parameter(name = "id", description = "ID продукта") @Valid @RequestBody ProductDTO product, @PathVariable("id") Long id
    );
}
