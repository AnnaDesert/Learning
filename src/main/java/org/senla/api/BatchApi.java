/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.senla.api;

import org.senla.model.BatchOfProduct;
import org.senla.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.senla.model.dto.BatchOfProductDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-05T16:09:04.794912+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "batch", description = "Запросы для batch_of_product")
public interface BatchApi {
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /batch : Добваить партию
     * Добваить партию
     *
     * @param batchOfProduct  (required)
     * @return Партия успешно добавлена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "addBatch",
        summary = "Добваить партию",
        description = "Добваить партию",
        tags = { "batch" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Партия успешно добавлена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PostMapping("/batch")
    void addBatch(
        @Parameter(name = "BatchOfProduct", description = "", required = true) @Valid @RequestBody BatchOfProductDTO batchOfProduct
    );

    /**
     * GET /batch : Получить все партии
     * Получить все партии
     *
     * @return Все партии (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "allBatch",
        summary = "Получить все партии",
        description = "Получить все партии",
        tags = { "batch" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все партии", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BatchOfProduct.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/batch")
    List<BatchOfProductDTO> allBatch();

    /**
     * GET /batch/{id} : Получить партию по ID
     * Получить партию по ID
     *
     * @param id ID партии (required)
     * @return Партия (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getBatchById",
        summary = "Получить партию по ID",
        description = "Получить партию по ID",
        tags = { "batch" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Партия", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchOfProduct.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/batch/{id}")
    Optional<BatchOfProductDTO> getBatchById(
        @Parameter(name = "id", description = "ID партии", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * DELETE /batch/{id} : Удалить партию по ID
     * Удалить партию по ID
     *
     * @param id ID партии (required)
     * @return Партия удалена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "removeBatchById",
        summary = "Удалить партию по ID",
        description = "Удалить партию по ID",
        tags = { "batch" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Партия удалена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @DeleteMapping("/batch/{id}")
    void removeBatchById(
        @Parameter(name = "id", description = "ID партии", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * PATCH /batch : Изменить партию
     * Изменить партию
     *
     * @param batchOfProduct  (required)
     * @return Партия успешно изменена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "updateBatch",
        summary = "Изменить партию",
        description = "Изменить партию",
        tags = { "batch" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Партия успешно изменена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PatchMapping("/batch/{id}")
    void updateBatch(
            @Parameter(name = "id", description = "ID партии", required = true, in = ParameterIn.PATH) @Valid @RequestBody BatchOfProductDTO batchOfProduct, @PathVariable("id") Long id
    );
}