/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.senla.api;

import org.senla.model.Error;
import org.senla.model.ProductCategory;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.senla.model.dto.ProductCategoryDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-05T16:09:04.794912+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "category", description = "Запросы для product_category")
public interface CategoryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /category : Добваить категорию товара
     * Добваить категорию товара
     *
     * @param productCategory  (required)
     * @return Категория товара успешно добавлена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "addCategory",
        summary = "Добваить категорию товара",
        description = "Добваить категорию товара",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Категория товара успешно добавлена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PostMapping("/category")
    void addCategory(
        @Parameter(name = "ProductCategory", description = "", required = true) @Valid @RequestBody ProductCategoryDTO productCategory
    );

    /**
     * GET /category : Получить все категории товара
     * Получить все категории товара
     *
     * @return Все категории товара (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "allCategory",
        summary = "Получить все категории товара",
        description = "Получить все категории товара",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все категории товара", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductCategory.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/category")
    List<ProductCategoryDTO> allCategory();

    /**
     * GET /category/{id} : Получить категорию товара по ID
     * Получить категорию товара по ID
     *
     * @param id ID категории товара (required)
     * @return Категория товара (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Получить категорию товара по ID",
        description = "Получить категорию товара по ID",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Категория товара", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductCategory.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/category/{id}")
    Optional<ProductCategoryDTO> getCategoryById(
        @Parameter(name = "id", description = "ID категории товара", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * GET /category/{name} : Получить категорию товара по названию
     * Получить категорию товара по названию
     *
     * @param name Название категории товара (required)
     * @return Категория товара (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "getCategoryByName",
        summary = "Получить категорию товара по названию",
        description = "Получить категорию товара по названию",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Категория товара", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductCategory.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/category/name/{name}")
    Optional<ProductCategoryDTO> getCategoryByName(
        @Parameter(name = "name", description = "Название категории товара", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );

    /**
     * DELETE /category/{id} : Удалить категорию товара по ID
     * Удалить категорию товара по ID
     *
     * @param id ID Категории товара (required)
     * @return Категория товара удалена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "removeCategoryById",
        summary = "Удалить категорию товара по ID",
        description = "Удалить категорию товара по ID",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Категория товара удалена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @DeleteMapping("/category/{id}")
    void removeCategoryById(
        @Parameter(name = "id", description = "ID Категории товара", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * PATCH /category : Изменить категорию товара
     * Изменить категорию товара
     *
     * @param productCategory  (required)
     * @return Категория товара успешно изменена (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Изменить категорию товара",
        description = "Изменить категорию товара",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Категория товара успешно изменена"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PatchMapping("/category/{id}")
    void updateCategory(
            @Parameter(name = "id", description = "ID категории") @Valid @RequestBody ProductCategoryDTO productCategory, @PathVariable("id") Long id
    );
}