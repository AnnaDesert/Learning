/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.senla.api;

import org.senla.model.Error;
import org.senla.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.senla.model.dto.UserCreationDTO;
import org.senla.model.dto.UserDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-05T16:09:04.794912+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "user", description = "Запросы для user")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user : Получить всеx пользователей
     * Получить всеx пользователей
     *
     * @return Все пользователи (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "allUser",
        summary = "Получить всеx пользователей",
        description = "Получить всеx пользователей",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все пользователи", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/user")
    List<UserDTO> allUser();

    /**
     * GET /user/{email} : Получить пользователя по адресу электронной пчты
     * Получить пользователя по адресу электронной пчты
     *
     * @param email Адрес электронной почты (required)
     * @return Пользователь (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "userByEmail",
        summary = "Получить пользователя по адресу электронной пчты",
        description = "Получить пользователя по адресу электронной пчты",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пользователь", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/user/email/{email}")
    Optional<UserDTO> userByEmail(
        @Parameter(name = "email", description = "Адрес электронной почты", required = true, in = ParameterIn.PATH) @PathVariable("email") String email
    );

    /**
     * GET /user/{id} : Получить пользователя по ID
     * Получить пользователя по ID
     *
     * @param id ID пользователя (required)
     * @return Пользователь (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "userById",
        summary = "Получить пользователя по ID",
        description = "Получить пользователя по ID",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пользователь", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/user/{id}")
    Optional<UserDTO> userById(
        @Parameter(name = "id", description = "ID пользователя", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * GET /user/{phone_number} : Получить пользователя по номеру телефона
     * Получить пользователя по номеру телефона
     *
     * @param phoneNumber Номер телефна (required)
     * @return Пользователь (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "userByPhone",
        summary = "Получить пользователя по номеру телефона",
        description = "Получить пользователя по номеру телефона",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пользователь", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @GetMapping("/user/phoneNumber/{phoneNumber}")
    Optional<UserDTO> userByPhone(
        @Parameter(name = "phoneNumber", description = "Номер телефона", required = true, in = ParameterIn.PATH) @PathVariable("phoneNumber") String phoneNumber
    );

    /**
     * DELETE /user/{id} : Удалить пользователя по ID
     * Удалить пользователя по ID
     *
     * @param id ID пользователя (required)
     * @return Пользователь удален (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "removeUserById",
        summary = "Удалить пользователя по ID",
        description = "Удалить пользователя по ID",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пользователь удален"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" }
    )
    @DeleteMapping("/user/{id}")
    void removeUserById(
        @Parameter(name = "id", description = "ID пользователя", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

    /**
     * POST /user : Добваить пользователя
     * Добваить нового пользователя
     *
     * @param user  (required)
     * @return Пользователь успешно добавлен (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "singUpUser",
        summary = "Добваить пользователя",
        description = "Добваить нового пользователя",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пользователь успешно добавлен"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PostMapping("/user")
    void singUpUser(
            @Parameter(name = "User", description = "", required = true) @Valid @RequestBody UserCreationDTO user
    );

    /**
     * PATCH /user : Изменить пользователя
     * Изменить пользователя
     *
     * @param user  (required)
     * @return Пользователь успешно изменен (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Изменить пользователя",
        description = "Изменить пользователя",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пользователь успешно изменен"),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @PatchMapping("/user/{id}")
    void updateUser(
            @Parameter(name = "id", description = "ID пользователя") @Valid @RequestBody UserCreationDTO user, @PathVariable("id") Long id
    );
}
